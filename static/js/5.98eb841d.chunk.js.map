{"version":3,"sources":["components/collection_item/collection_item.component.jsx","components/collection_preview/collection_preview.component.jsx","../../../../src/react/parser/index.ts","../../../../src/react/data/OperationData.ts","../../../../src/react/data/QueryData.ts","../../../../../src/react/hooks/utils/useBaseQuery.ts","../../../../../src/react/hooks/utils/useDeepMemo.ts","../../../../../src/react/hooks/utils/useAfterFastRefresh.ts","../../../../src/react/hooks/useQuery.ts","components/collections_overview/collections_overview.component_gql.jsx","components/collections_overview/collections_overview.container_gql.jsx","views/collection/collection_gql.jsx","views/collection/collection.container_gql.jsx","views/shop/shop_gql.jsx"],"names":["connect","dispatch","addItem","item","name","price","imageUrl","className","style","backgroundImage","onClick","inverted","withRouter","title","items","history","match","push","path","toLowerCase","toUpperCase","filter","idx","map","id","DocumentType","cache","Map","operationName","type","Query","Mutation","Subscription","options","context","onNewData","runLazy","previous","Object","create","runLazyQuery","cleanup","lazyOptions","obsRefetch","variables","currentObservable","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","this","refreshClient","getOptions","skip","query","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","Promise","resolve","startQuerySubscription","afterExecute","lazy","isMounted","ssrInitiated","handleErrorOrCompleted","previousOptions","unmount","bind","result","renderPromises","ssrDisabled","fetchDisabled","client","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","verifyDocumentType","displayName","fetchPolicy","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","setOptions","catch","currentSubscription","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","last","resetLastResults","currentResult","getCurrentResult","partial","errors","length","graphQLErrors","assign","getLastResult","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","newOptions","storePrevious","isNew","document","operation","cached","get","fragments","definitions","x","kind","queries","mutations","subscriptions","definition","parser","requiredOperationName","usedOperationName","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","then","memoFn","key","ref","value","useDeepMemo","queryResult","__DEV__","effectFn","useAfterFastRefresh","useQuery","CollectionOverviewGQL","collections","otherCollectionProps","GET_COLLECTIONS","gql","CollectionsOverviewContainerGQL","console","log","CollectionPageGQL","GET_COLLECTIONS_BY_TITLE","CollectionPageContainerGQL","params","collectionId","getCollectionsByTitle","ShopPage","exact","component"],"mappings":"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","file":"static/js/5.98eb841d.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CustomButton from \"../custom_button/custom_button.component\";\nimport { addItem } from \"../../redux/cart/cart.actions\";\nimport \"./collection_item.styles.scss\";\n\nconst CollectionItem = ({ item, addItem }) => {\n  const { name, price, imageUrl } = item;\n  return (\n    <div className=\"collection-item\">\n      <div\n        className=\"image\"\n        style={{\n          backgroundImage: `url(${imageUrl})`,\n        }}\n      />\n      <div className=\"collection-footer\">\n        <span className=\"name\">{name}</span>\n        <span className=\"price\">{price}</span>\n      </div>\n      <CustomButton onClick={() => addItem(item)} inverted>\n        Add to cart\n      </CustomButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addItem: (item) => dispatch(addItem(item)),\n});\n\nexport default connect(null, mapDispatchToProps)(CollectionItem);\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport CollectionItem from \"../collection_item/collection_item.component\";\nimport \"./collection_preview.styles.scss\";\n\nconst CollectionPreview = ({ title, items, history, match }) => (\n  <div className=\"collection-preview\">\n    <h1\n      className=\"title\"\n      // path也是match的屬性之一，會回傳透過哪個Route進入的path屬性\n      onClick={() => history.push(`${match.path}/${title.toLowerCase()}`)}\n    >\n      {title.toUpperCase()}\n    </h1>\n    <div className=\"preview\">\n      {items\n        .filter((item, idx) => idx < 4)\n        .map((item) => (\n          <CollectionItem key={item.id} item={item} />\n        ))}\n    </div>\n  </div>\n);\n\nexport default withRouter(CollectionPreview);\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n","import { invariant } from '../../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  public currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import '../../../utilities/globals';\n\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\nimport { useAfterFastRefresh } from './useAfterFastRefresh';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current.isMounted before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && queryDataRef.current.isMounted && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: void 0,\n      onCompleted: void 0\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we reinitialize\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => {\n    return () => {\n      queryData.cleanup();\n      // this effect can run multiple times during a fast-refresh\n      // so make sure we clean up the ref\n      queryDataRef.current = void 0;\n    }\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n    queryData.currentObservable,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import '../../../utilities/globals';\nimport { useEffect, useRef } from \"react\";\n\n/**\n * This hook allows running a function only immediately after a react\n * fast refresh or live reload.\n *\n * Useful in order to ensure that we can reinitialize things that have been\n * disposed by cleanup functions in `useEffect`.\n * @param effectFn a function to run immediately after a fast refresh\n */\nexport function useAfterFastRefresh(effectFn: () => unknown) {\n  if (__DEV__) {\n    const didRefresh = useRef(false);\n    useEffect(() => {\n      return () => {\n        // Detect fast refresh, only runs multiple times in fast refresh\n        didRefresh.current = true;\n      };\n    }, []);\n\n    useEffect(() => {\n      if (didRefresh.current === true) {\n        // This block only runs after a fast refresh\n        didRefresh.current = false;\n        effectFn();\n      }\n    }, [])\n  }\n}\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { QueryHookOptions, QueryResult } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import React from \"react\";\n\nimport CollectionPreview from \"../collection_preview/collection_preview.component\";\n\nimport \"./collections_overview.styles.scss\";\n\nconst CollectionOverviewGQL = ({ collections }) => (\n  <div className=\"collections-overiew\">\n    {collections.map(({ id, ...otherCollectionProps }) => (\n      <CollectionPreview key={id} {...otherCollectionProps} />\n    ))}\n  </div>\n);\n\nexport default CollectionOverviewGQL;\n","import React from \"react\";\n\nimport { useQuery, gql } from \"@apollo/client\";\n\nimport CollectionOverviewGQL from \"./collections_overview.component_gql\";\nimport Spinner from \"../spinner/spinner.component\";\n\nconst GET_COLLECTIONS = gql`\n  {\n    collections {\n      id\n      title\n      items {\n        id\n        name\n        price\n        imageUrl\n      }\n    }\n  }\n`;\n\nconst CollectionsOverviewContainerGQL = () => {\n  // https://github.com/apollographql/react-apollo/issues/1686\n  // <Query query={GET_COLLECTIONS}>\n  //   {({ loading, error, data }) => {\n  //     console.log(\"loading:\", loading);\n  //     console.log(\"error:\", error);\n  //     console.log(\"data:\", data);\n  //     if (loading) {\n  //       return <Spinner></Spinner>;\n  //     }\n  //     const getCollectionsByTitle = data.collections;\n  //     return <CollectionOverviewGQL collections={getCollectionsByTitle} />;\n  //   }}\n  // </Query>\n\n  const { loading, error, data } = useQuery(GET_COLLECTIONS);\n\n  if (loading) {\n    return <Spinner></Spinner>;\n  }\n  if (error) {\n    return <p>Error :(</p>;\n  }\n\n  console.log(\"data.collections = \", data.collections);\n  return <CollectionOverviewGQL collections={data.collections} />;\n};\n\nexport default CollectionsOverviewContainerGQL;\n","import React from \"react\";\nimport CollectionItem from \"../../components/collection_item/collection_item.component\";\n\nimport \"./collection.styles.scss\";\n\n// 商品分類頁面 : /crwn-clothing/shop/hats\nconst CollectionPageGQL = ({ collections }) => {\n  const { title, items } = collections;\n  return (\n    <div className=\"collection-page\">\n      <h2 className=\"title\">{title}</h2>\n      <div className=\"items\">\n        {items.map((item) => (\n          <CollectionItem key={item.id} item={item} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CollectionPageGQL;\n","import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\n\nimport Spinner from \"../../components/spinner/spinner.component\";\n\nimport CollectionPageGQL from \"./collection_gql\";\n\nconst GET_COLLECTIONS_BY_TITLE = gql`\n  query getCollectionsByTitle($title: String!) {\n    getCollectionsByTitle(title: $title) {\n      id\n      title\n      items {\n        id\n        name\n        price\n        imageUrl\n      }\n    }\n  }\n`;\n\nconst CollectionPageContainerGQL = ({ match }) => {\n  // V2\n  // <Query\n  //   query={GET_COLLECTIONS_BY_TITLE}\n  //   variables={{ title: match.params.collectionId }}\n  // >\n  //   {({ loading, error, data }) => {\n  //     if (loading) {\n  //       return <Spinner></Spinner>;\n  //     }\n  //     const getCollectionsByTitle = data.getCollectionsByTitle;\n  //     return <CollectionPageGQL collections={getCollectionsByTitle} />;\n  //   }}\n  // </Query>\n\n  // V3\n  const { loading, error, data } = useQuery(GET_COLLECTIONS_BY_TITLE, {\n    variables: { title: match.params.collectionId },\n  });\n\n  if (loading) {\n    return <Spinner></Spinner>;\n  }\n  if (error) {\n    return `Error! ${error}`;\n  }\n\n  const getCollectionsByTitle = data.getCollectionsByTitle;\n  return <CollectionPageGQL collections={getCollectionsByTitle} />;\n};\n\nexport default CollectionPageContainerGQL;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#importing_defaults\n// https://openhome.cc/Gossip/ECMAScript/Export.html\nimport { default as CollectionsOverviewContainerGQL } from \"../../components/collections_overview/collections_overview.container_gql\";\n\nimport { default as CollectionPageContainerGQL } from \"../collection/collection.container_gql\";\n\nconst ShopPage = ({ match }) => {\n  return (\n    <div className=\"shop-page\">\n      <Route\n        exact\n        path={`${match.path}`}\n        component={CollectionsOverviewContainerGQL}\n      />\n      <Route\n        path={`${match.path}/:collectionId`}\n        component={CollectionPageContainerGQL}\n      ></Route>\n    </div>\n  );\n};\n\nexport default ShopPage;\n"],"sourceRoot":""}