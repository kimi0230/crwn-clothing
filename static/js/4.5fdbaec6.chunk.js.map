{"version":3,"sources":["components/collection_item/collection_item.component.jsx","components/collection_preview/collection_preview.component.jsx","redux/shop/shop.selectors.js","components/with_spinner/with_spinner.component.jsx","components/collections_overview/collections_overview.component.jsx","components/collections_overview/collections_overview.container.jsx","views/collection/collection.jsx","views/collection/collection.container.jsx","views/shop/shop.jsx"],"names":["connect","dispatch","addItem","item","name","price","imageUrl","className","style","backgroundImage","onClick","inverted","withRouter","title","items","history","match","push","path","toLowerCase","toUpperCase","filter","idx","map","id","selectShop","state","shop","selectCollections","createSelector","collections","selectCollectionsForPreview","Object","keys","key","selectIsCollectionFetching","isFetching","selectIsCollectionsLoaded","WithSpinner","WrappedComponent","isLoading","otherProps","mapStateToProps","createStructuredSelector","otherCollectionProps","CollectionsOverviewContainer","compose","CollectionsOverview","CollectionPage","collectionUrlParam","collectionId","useParams","collection","useSelector","CollectionPageContainer","fetchCollectionsStart","useEffect","exact","component"],"mappings":"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","file":"static/js/4.5fdbaec6.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CustomButton from \"../custom_button/custom_button.component\";\nimport { addItem } from \"../../redux/cart/cart.actions\";\nimport \"./collection_item.styles.scss\";\n\nconst CollectionItem = ({ item, addItem }) => {\n  const { name, price, imageUrl } = item;\n  return (\n    <div className=\"collection-item\">\n      <div\n        className=\"image\"\n        style={{\n          backgroundImage: `url(${imageUrl})`,\n        }}\n      />\n      <div className=\"collection-footer\">\n        <span className=\"name\">{name}</span>\n        <span className=\"price\">{price}</span>\n      </div>\n      <CustomButton onClick={() => addItem(item)} inverted>\n        Add to cart\n      </CustomButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addItem: (item) => dispatch(addItem(item)),\n});\n\nexport default connect(null, mapDispatchToProps)(CollectionItem);\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport CollectionItem from \"../collection_item/collection_item.component\";\nimport \"./collection_preview.styles.scss\";\n\nconst CollectionPreview = ({ title, items, history, match }) => (\n  <div className=\"collection-preview\">\n    <h1\n      className=\"title\"\n      // path也是match的屬性之一，會回傳透過哪個Route進入的path屬性\n      onClick={() => history.push(`${match.path}/${title.toLowerCase()}`)}\n    >\n      {title.toUpperCase()}\n    </h1>\n    <div className=\"preview\">\n      {items\n        .filter((item, idx) => idx < 4)\n        .map((item) => (\n          <CollectionItem key={item.id} item={item} />\n        ))}\n    </div>\n  </div>\n);\n\nexport default withRouter(CollectionPreview);\n","import { createSelector } from \"reselect\";\n\n// state.shop 的 shop 指的是在 root_reducer.js\n//const rootReducer = combineReducers({\n//   user: userReducer,\n//   cart: cartReducer,\n//   directory: directoryReducer,\n//   shop: shopReducer,  ----> 這個\n// });\n\nconst selectShop = (state) => state.shop;\n\n//shop.reducer.js\n// const INITIAL_STATE = {\n//   collections: null, ---> 抓這個\n//   isFetching: false,\n//   errorMessage: undefined,\n// };\nexport const selectCollections = createSelector(\n  [selectShop],\n  (shop) => shop.collections\n);\n\nexport const selectCollectionsForPreview = createSelector(\n  [selectCollections],\n  (collections) =>\n    collections ? Object.keys(collections).map((key) => collections[key]) : []\n);\n\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector([selectCollections], (collections) =>\n    collections ? collections[collectionUrlParam] : null\n  );\n\nexport const selectIsCollectionFetching = createSelector(\n  [selectShop],\n  (shop) => shop.isFetching\n);\n\nexport const selectIsCollectionsLoaded = createSelector(\n  [selectShop],\n  (shop) => !!shop.collections\n);\n","import React from \"react\";\nimport Spinner from \"../spinner/spinner.component\";\n\nconst WithSpinner =\n  (WrappedComponent) =>\n  ({ isLoading, ...otherProps }) => {\n    return isLoading ? <Spinner /> : <WrappedComponent {...otherProps} />;\n  };\n\nexport default WithSpinner;\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectCollectionsForPreview } from \"../../redux/shop/shop.selectors\";\nimport CollectionPreview from \"../collection_preview/collection_preview.component\";\n\nimport \"./collections_overview.styles.scss\";\n\nconst CollectionOverview = ({ collections }) => (\n  <div className=\"collections-overiew\">\n    {collections.map(({ id, ...otherCollectionProps }) => (\n      <CollectionPreview key={id} {...otherCollectionProps} />\n    ))}\n  </div>\n);\n\nconst mapStateToProps = createStructuredSelector({\n  collections: selectCollectionsForPreview,\n});\n\nexport default connect(mapStateToProps)(CollectionOverview);\n","import { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nimport { createStructuredSelector } from \"reselect\";\nimport { selectIsCollectionFetching } from \"../../redux/shop/shop.selectors\";\nimport WithSpinner from \"../with_spinner/with_spinner.component\";\nimport CollectionsOverview from \"./collections_overview.component\";\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: selectIsCollectionFetching,\n});\n\nconst CollectionsOverviewContainer = compose(\n  connect(mapStateToProps),\n  WithSpinner\n)(CollectionsOverview);\n\nexport default CollectionsOverviewContainer;\n","import React from \"react\";\nimport CollectionItem from \"../../components/collection_item/collection_item.component\";\n\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { selectCollection } from \"../../redux/shop/shop.selectors\";\n\nimport \"./collection.styles.scss\";\n\n// 商品分類頁面 : /crwn-clothing/shop/hats\nconst CollectionPage = () => {\n  const { collectionId } = useParams();\n  const collection = useSelector(selectCollection(collectionId));\n  const { title, items } = collection;\n  return (\n    <div className=\"collection-page\">\n      <h2 className=\"title\">{title}</h2>\n      <div className=\"items\">\n        {items.map((item) => (\n          <CollectionItem key={item.id} item={item} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CollectionPage;\n","import { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport { selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\nimport WithSpinner from \"../../components/with_spinner/with_spinner.component\";\nimport CollectionPage from \"./collection\";\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: (state) => !selectIsCollectionsLoaded(state),\n});\n\nconst CollectionPageContainer = compose(\n  connect(mapStateToProps),\n  WithSpinner\n)(CollectionPage);\n\nexport default CollectionPageContainer;\n","import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport CollectionsOverviewContainer from \"../../components/collections_overview/collections_overview.container\";\nimport CollectionPageContainer from \"../collection/collection.container\";\n\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\n\nconst ShopPage = ({ fetchCollectionsStart, match }) => {\n  useEffect(() => {\n    fetchCollectionsStart();\n    // 方法一: REST API 取得 collections >>>\n    // https://firestore.googleapis.com/v1/projects/crwn-db-e06e9/databases/(default)/documents/collections\n    // fetch(\n    //   \"https://firestore.googleapis.com/v1/projects/crwn-db-e06e9/databases/(default)/documents/collections\"\n    // )\n    //   .then((response) => response.json())\n    //   .then((collections) => console.log(\"fetch \", collections));\n    // REST API 取得 collections <<<\n\n    // const collectionRef = collection(firestore, \"collections\");\n    // 方法二: getDos >>>\n    // // getDocs: 取出 collection 的所有 docs\n    // getDocs(collectionRef).then((snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false });\n    // });\n    // getDos <<<\n\n    // 方法三: 監聽 collections >>>\n    // this.unsubscribeFromSnapshop = onSnapshot(collectionRef, (snapshot) => {\n    //   // 將 collection 裏面所有的document 轉成 map\n    //   console.log(\"kkk\", snapshot);\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false });\n    // });\n    // 監聽 collections <<<\n  }, [fetchCollectionsStart]);\n\n  return (\n    <div className=\"shop-page\">\n      <Route\n        exact\n        path={`${match.path}`}\n        component={CollectionsOverviewContainer}\n      />\n      <Route\n        path={`${match.path}/:collectionId`}\n        component={CollectionPageContainer}\n      ></Route>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart()),\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"],"sourceRoot":""}